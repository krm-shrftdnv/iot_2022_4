import grpc
from concurrent import futures
import time
import statistics
# import classes generated by grpc tools
import std_pb2, std_pb2_grpc

SERVER_ADDRESS = 'localhost'
SERVER_PORT = 5000


# extend generated class
class StandardDeviationServicer(std_pb2_grpc.StandardDeviationServicer):
    def StandardDeviation(self, request_iterator, context):
        response = std_pb2.Number()
        numbers = []
        for number in request_iterator:
            numbers.append(number.value)
        response.value = statistics.stdev(numbers)
        return response


# create a gRPC server
server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))

std_pb2_grpc.add_StandardDeviationServicer_to_server(
    StandardDeviationServicer(), server)

# listen on specified port
print(f'Starting Team 4 server. Listening on port {SERVER_PORT}.')
server.add_insecure_port(f'{SERVER_ADDRESS}:{SERVER_PORT}')
server.start()

# start server for 1stop server by CTRL+C
try:
    while True:
        time.sleep(10)
except KeyboardInterrupt:
    server.stop(0)
